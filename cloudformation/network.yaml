AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates the network's infraestructure and creates the ECR repo.

###################
# Resources section
###################

Resources:

  ## VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: proy-vpc

  ## Internet Gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: proy-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## Public Route Table

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: proy-prt  # Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## Public Subnet 1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: proy-public-subnet-1

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Public Subnet 2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: proy-public-subnet-2

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Public Subnet 3

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.3.0/24
      AvailabilityZone: us-east-1c
      Tags:
        - Key: Name
          Value: proy-public-subnet-3

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Security Groups

  SecurityGroupBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP Ingress
      GroupName: proy-BalancerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupTask:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP Ingress from proy-BalancerSecurityGroup
      GroupName: proy-TaskSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupBalancer
      VpcId: !Ref VPC

  # Para hacer tests, luego se puede quitar porque no se necesita
  # que pueda ser accedido para absolutamente nada

  TestInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP Ingress from everywhere
      GroupName: proy-TestInstanceSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ## Container Registry

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: proyrepo

###################
# Resources section
###################

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: proy-VPCId

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: proy-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: proy-PublicSubnet2Id

  PublicSubnet3Id:
    Description: Public Subnet 3 ID
    Value: !Ref PublicSubnet3
    Export:
      Name: proy-PublicSubnet3Id

  TaskSGId:
    Description: proy-TaskSecurityGroup ID
    Value: !Ref SecurityGroupTask
    Export:
      Name: proy-TaskSGId

  TestInstanceSGId:
    Description: proy-TestInstanceSG ID
    Value: !Ref TestInstanceSG
    Export:
      Name: proy-TestInstanceSGId
