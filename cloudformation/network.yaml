AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates the network's infraestructure and creates the ECR repo.

####################
# Parameters section
####################

Parameters:
  IAMProfile:
    Description: PREVIOUSLY existing IAM Instance Profile
    Type: String
    Default: LabInstanceProfile

  ECRUsername:
    Description: Username used in ECR
    Type: String
    Default: AWS

  ECRPassword:
    Description: Password used in ECR
    Type: String
    Default: 592806013290.dkr.ecr.us-east-1.amazonaws.com

###################
# Resources section
###################

Resources:

  ## VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: proy-vpc

  ## Internet Gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: proy-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## Public Route Table

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: proy-prt  # Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## Public Subnet 1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: proy-public-subnet-1

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Public Subnet 2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: proy-public-subnet-2

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Public Subnet 3

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.3.0/24
      AvailabilityZone: us-east-1c
      Tags:
        - Key: Name
          Value: proy-public-subnet-3

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl

  ## Security Groups

  SecurityGroupBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP Ingress
      GroupName: proy-BalancerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupTask:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP Ingress from proy-BalancerSecurityGroup
      GroupName: proy-TaskSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupBalancer
      VpcId: !Ref VPC

  # Para hacer tests, luego se puede quitar porque no se necesita
  # que pueda ser accedido para absolutamente nada

  TestInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP Ingress from everywhere
      GroupName: TestInstanceSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ## Container Registry

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: proyrepo

  ## Instance

  # TODO: Cuando sepamos que está bien deberíamos eliminar ese "docker run"
  # TODO: Esta instancia no está ejecutando correctamente el servidor. why?

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08a0d1e16fc3f61ea
      # KeyName: proy-testkp
      IamInstanceProfile: !Ref IAMProfile
      NetworkInterfaces:
        - GroupSet:
            - !Ref TestInstanceSG
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: proy-TestInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          dnf update -y
          dnf -y install docker
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo echo "
          Flask
          " > /etc/profile.d/requirements.txt

          sudo echo "
          from flask import Flask

          app = Flask(__name__)

          @app.route('/')
          def hello():
            return "Hello, world!"

          if __name__ ==  '__main__':
            app.run(debug=True, host='0.0.0.0', port=80)
          " > /etc/profile.d/flask_app.py

          sudo echo "
          #syntax = docker/dockerfile:1.4
          FROM python:3.9-alpine
          WORKDIR /app
          COPY requirements.txt requirements.txt
          RUN pip3 install -r requirements.txt
          COPY flask_app.py flask_app.py
          CMD [\"python\", \"flask_app.py\"]
          " > /etc/profile.d/Dockerfile

          sudo docker build -t proy_flask_container /etc/profile.d/
          sudo docker run -p 80:80 -d proy_flask_container

          sudo aws ecr get-login-password --region us-east-1 | sudo docker login --username ${ECRUsername} --password-stdin ${ECRPassword}
          sudo docker tag proy_flask_container ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/proyrepo:proy_flask_container
          sudo docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/proyrepo:proy_flask_container
