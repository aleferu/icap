AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates the network's infraestructure and creates the ECR repo.

####################
# Parameters section
####################

Parameters:
  IAMProfile:
    Description: PREVIOUSLY existing IAM Instance Profile
    Type: String
    Default: LabInstanceProfile

  ECRUsername:
    Description: Username used in ECR
    Type: String
    Default: AWS

  ECRPassword:
    Description: Password used in ECR
    Type: String
    Default: 592806013290.dkr.ecr.us-east-1.amazonaws.com

  PublicSubnetId:
    Description: Valid Subnet ID
    Type: String

  # TODO: Cuando sepamos que está bien deberíamos eliminar esto
  # O poner un grupo de seguridad que no sirva de nada (no acepte nada)

  SecurityGroupId:
    Description: Valid Security Group that accepts SSH and HTTP connections
    Type: String

###################
# Resources section
###################

Resources:

  ## Instance

  # TODO: Cuando sepamos que está bien deberíamos eliminar ese "docker run"

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-08a0d1e16fc3f61ea
      # KeyName: proy-testkp
      IamInstanceProfile: !Ref IAMProfile
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroupId
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnetId
      Tags:
        - Key: Name
          Value: proy-TestInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          dnf update -y
          dnf -y install docker
          sudo systemctl start docker
          sudo systemctl enable docker

          sudo echo "
          boto3
          Flask
          " > /etc/profile.d/requirements.txt

          sudo echo "
          #!/usr/bin/env python3

          import boto3
          from flask import Flask, Response, request
          from boto3.dynamodb.conditions import Key
          import statistics

          app = Flask(__name__)

          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          table = dynamodb.Table('proy-stats')

          def get_yearmonth():
              month, year = request.args.get('month'), request.args.get('year')
              try:
                  month = int(month)
                  year = int(year)
              except (ValueError, TypeError):
                  return None
              return year * 100 + month

          def build_json_response(msg, status):
              return Response(msg, status=status, mimetype='application/json')

          def build_ok_json_response(msg):
              return build_json_response(msg, 200)

          def get_invalid_args_response():
              http_code = 400  # Bad Request
              response_json = {
                  'error': 'Invalid arguments. Make sure \'month\' and \'year\' are provided and are valid.'
              }
              return build_json_response(str(response_json), http_code)

          def get_not_found_response():
              http_code = 404  # Not Found
              response_json = {
                  'error': 'Combination of month and year not found in DB.'
              }
              return build_json_response(str(response_json), http_code)

          @app.route('/maxdiff')
          def maxdiff():
              yearmonth = get_yearmonth()

              if yearmonth is None:
                  return get_invalid_args_response()

              response = table.query(
                  KeyConditionExpression=Key('YearMonth').eq(yearmonth)
              )

              items = response.get('Items', [])

              if len(items) == 0:
                  return get_not_found_response()

              temperatures_mean = [t['Mean'] for t in items]
              result = {
                  'result': max(temperatures_mean) - min(temperatures_mean)
              }
              return build_ok_json_response(str(result))

          @app.route('/sd')
          def sd():
              yearmonth = get_yearmonth()

              if yearmonth is None:
                  return get_invalid_args_response()

              response = table.query(
                  KeyConditionExpression=Key('YearMonth').eq(yearmonth)
              )

              items = response.get('Items', [])

              if len(items) == 0:
                  return get_not_found_response()
              
              temperatures_deviation = [t['Deviation'] for t in items]
              result = {
                  'result': max(temperatures_deviation)
              }
              return build_ok_json_response(str(result))

          @app.route('/temp')
          def temp():
              yearmonth = get_yearmonth()

              if yearmonth is None:
                  return get_invalid_args_response()

              response = table.query(
                  KeyConditionExpression=Key('YearMonth').eq(yearmonth)
              )

              items = response.get('Items', [])

              if len(items) == 0:
                  return get_not_found_response()

              temperatures_mean = [t['Mean'] for t in items]
              result = {
                  'result': statistics.mean(temperatures_mean)
              }
              return build_ok_json_response(str(result))

          if __name__ == '__main__':
              app.run(debug=True, host='0.0.0.0', port=80)
          " > /etc/profile.d/flask_app.py

          sudo echo "
          #syntax = docker/dockerfile:1.4
          FROM python:3.9-alpine
          WORKDIR /app
          COPY requirements.txt requirements.txt
          RUN pip3 install -r requirements.txt
          COPY flask_app.py flask_app.py
          CMD [\"python\", \"flask_app.py\"]
          " > /etc/profile.d/Dockerfile

          sudo docker build -t proy_flask_container /etc/profile.d/
          sudo docker run -p 80:80 -d proy_flask_container

          sudo aws ecr get-login-password --region us-east-1 | sudo docker login --username ${ECRUsername} --password-stdin ${ECRPassword}
          sudo docker tag proy_flask_container ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/proyrepo:proy_flask_container
          sudo docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/proyrepo:proy_flask_container
